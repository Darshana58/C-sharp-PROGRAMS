----------------DAY 04-----------------------
---------------------Problem on method overloading---------------
using System;
//Method Overloading
  public class Program
  {
    int a = 6, b = 7;
    public void Sum()
    {
     Console.WriteLine("Sum is : " + (a + b));
     }
    public void Sum(int a,int b)
    {
    Console.WriteLine("Sum is : " + (a + b));
    }
    public int Sum (int a,int b,int c)
    {
     return (a + b);
    }
    public  void Sum (string a,string b)
    {
     Console.WriteLine("Sum is : " + (Convert.ToInt32(a) + Convert.ToInt32(b)));
     }
      public static void Main (string[] args)
     {
      Program p = new Program();
      p.Sum();
      p.Sum(1,2);
      Console.WriteLine(p.Sum(1,2,3));
      p.Sum("1","2");
      Console.ReadLine();
      }
  }
--------------------------Program for method overloading on multiplication----------
using System;
//Method Overloading
  public class Program
  {
    int a = 6, b = 7;
    public void Mul()
    {
     Console.WriteLine("Multiplication of two numbers is : " + (a*b));
     }
    public void Mul(int a,int b)
    {
    Console.WriteLine("Multiplication two numbers is : " + (a*b));
    }
    public int Mul(int a,int b,int c)
    {
     return (a*b*c);
    }
    public  void Mul(string a,string b)
    {
     Console.WriteLine("Multiplication two numbers is : " + (Convert.ToInt32(a) * Convert.ToInt32(b)));
     }
      public static void Main (string[] args)
     {
      Program p = new Program();
      p.Mul();
      p.Mul(2,2);
      Console.WriteLine("Multiplication of three numbers is " + p.Mul(4,2,3));
      p.Mul("7","2");
      Console.ReadLine();
      }
}
---------------------------Prgram on operator overloading------------------------------------------------------------
using System;
 public class Sum
  {
    public int number1, number2;
    
    public Sum (int number1,int number2)
    {
      this.number1 = number1;
       this.number2 = number2;
    }
   public static Sum operator +(Sum S1,Sum S2)
    {
     Sum S3 = new Sum(0,0);
     S3.number1 = S3.number1 + S2.number1;
     S3.number2 = S3.number2 + S2.number2;
     return S3;
     }
}
   public class Class1
   {
    public static void Main()
    {
     Sum S1 = new Sum(1,2);
     Sum S2 = new Sum(2,2);    
     Sum S3 = new Sum(0,0);
     Console.WriteLine("Values before sum Number 1:" + S3.number1 + "Number 2 : " + S3.number2);
     S3 = S1 + S2;
     Console.WriteLine("Values after sum Number 1:" + S3.number1 + "Number 2 : " + S3.number2);
     Console.ReadLine();
     }
   }
--------------------------------Program on operator overloading for multiplication--------------------------------------
using System;

public class mul
{
   public int num1,num2;
	public  mul(int num1,int num2)
	{
		this.num1=num1;
		this.num2=num2;
	}
	public static mul operator*(mul s1,mul s2)
	{
		mul s3=new mul(0,0);
		s3.num1=s1.num1*s2.num1;
		s3.num2=s1.num2*s2.num2;
		return s3;
	}
}
		public class Program
		{
	public static void Main()
	{
		mul s1=new mul(7,8);
		mul s2=new mul(2,6);
		mul s3=new mul(0,0);
                Console.WriteLine("Values before multi num 1:" + s3.num1 + "and num 2 : " + s3.num2);
		s3=s1*s2;
		Console.WriteLine("values after multi num 1: "+s3.num1+" and num 2: "+s3.num2);
                Console.ReadLine();
	}	
		}
-------------------------------base keyword program----------------------------
using System;
  public class BaseClass
  {
   public void Print()
   {
    Console.WriteLine("Hi I am in Base Class");
    }
  }
  class DerivedClass:BaseClass
  {
    new public void Print()
   {
    Console.WriteLine("Hi I am in Derived Class");
    }
   }
   public class Class2
   {
     public static void Main()
     {
      DerivedClass derivedClass = new DerivedClass();
      derivedClass.Print();
      BaseClass b = new DerivedClass();
      b.Print();
      Console.ReadLine();
      }
    }

---------------------------------------new keyword program--------------------------------------------------------------------------------
using System;
  public class BaseClass
  {
   public void Print()
   {
    Console.WriteLine("Hi I am in Base Class");
    }
  }
  class DerivedClass:BaseClass
  {
    new public void Print()
   {
    Console.WriteLine("Hi I am in Derived Class");
    }
   }
   public class Class2
   {
     public static void Main()
     {
      //DerivedClass derivedClass = new DerivedClass();
      //derivedClass.Print();
      //BaseClass b = new DerivedClass();
      //b.Print();
       BaseClass baseClass = new BaseClass();
       baseClass.Print();
       baseClass = new DerivedClass();
       baseClass.Print();
      Console.ReadLine();
      }
    }
---------------------------virtual and override keyword program--------------------------------------------
using System;
  public class BaseClass
  {
   public virtual void Print()
   {
    Console.WriteLine("Hi I am in Base Class");
    }
  }
  class DerivedClass:BaseClass
  {
     public override void Print()
   {
    Console.WriteLine("Hi I am in Derived Class");
    }
   }
   public class Class2
   {
     public static void Main()
     {
      //DerivedClass derivedClass = new DerivedClass();
      //derivedClass.Print();
      //BaseClass b = new DerivedClass();
      //b.Print();
       BaseClass baseClass = new BaseClass();
       baseClass.Print();
       baseClass = new DerivedClass();
       baseClass.Print();
      Console.ReadLine();
      }
    }
-----------------------------------base keyword program 2------------------------
using System;
  public class BaseClass
  {
   public virtual void Print()
   {
    Console.WriteLine("Hi I am in Base Class");
    }
  }
  class DerivedClass:BaseClass
  {
     public override void Print()
   {
    base.Print();
    Console.WriteLine("Hi I am in Derived Class");
    }
   }
   public class Class2
   {
     public static void Main()
     {
      DerivedClass d = new DerivedClass();
      d.Print();
      Console.ReadLine();
      }
    }
-----------------------------base keyword program constructor------------------------------
using System;
  public class ClassA
  {
    int n1,n2;
   
    public ClassA()
    {
     Console.WriteLine(" Hi I am base class constructor");
     }
    public ClassA(int i,int j)
    {
     n1 = i;
     n2 = j;
     Console.WriteLine("Parameterised Constructor Invoked");
     Console.WriteLine("Values are " + n1 + " and  " + n2);
    }
}
  public class DerivedClass : ClassA
  {
   public DerivedClass() : base() { }
   
   public DerivedClass(int i,int j) : base(i,j) { }
  }
  public class Class3
  {
  public static void Main()
   {
  DerivedClass d = new DerivedClass();
  DerivedClass d2 = new DerivedClass(10,20);
  Console.ReadLine();
  }
  }
------------------------------base keyword program important concept---------------------
using System;
    public class ClassA
    {
        int n1, n2;

 

        public ClassA()
        {
            Console.WriteLine("I am Base class Constructor");
        }
        public ClassA(int i, int j)
        {
            n1 = i;
            n2 = j;
            Console.WriteLine("Parameterized Constructor Invoked");
            Console.WriteLine("Values are" + n1 + " and " + n2);
        }

 

        public virtual void Swap()
        {
            Console.WriteLine("Hi I am swap Function ");
        }
    }

 

    public class DerivedClass : ClassA
    {

        public DerivedClass() : base() { }
        public DerivedClass(int i,int j) : base(i, j) {
            base.Swap();
        }
    }
    public class Class3
    {
        public static void Main()
        {
            DerivedClass d = new DerivedClass();
            DerivedClass d2 = new DerivedClass(10, 20);
            Console.ReadLine();
        }
    }

------------------------------------Program given by sir-------------------------------
Create a C# program that prompts the user for three names of people
and stores them in an array of Person-type objects. 
There will be two people of the Student type and one person of the Teacher type.

To do this, create a Person class that has a Name property of type string, 
a constructor that receives the name as a parameter and overrides the ToString () method.

Then create two more classes that inherit from the Person class, 
they will be called Student and Teacher. The Student class has a 
Study method that writes by console that the student is studying. 
The Teacher class will have an Explain method that writes to the console that the teacher is explaining.
 Remember to also create two constructors on the child classes that call the parent constructor of the Person class.

End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.


using System;
 
public class InheritanceObjects
{
    public static void Main(string[] args)
    {
        int total = 3;
        Person[] persons = new Person[total];
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
                persons[i] = new Teacher(Console.ReadLine());
            }
            else
            {
                persons[i] = new Student(Console.ReadLine());
            }
        }
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
               ((Teacher)persons[i]).Explain();
 
            }
            else
            {
                ((Student)persons[i]).Study();
            }
        }
    }
 
    public class Person
    {
        protected string Name;
 
        public Person(string name)
        {
            Name = name;
        }
 
        public override string ToString()
        {
            return "Hello! My name is " + Name;
        }
 
        ~Person()
        {
            Name = string.Empty;
        }
    }
 
    public class Teacher : Person
    {
        public Teacher(string name) : base(name)
        {
            Name = name;
        }
 
        public void Explain()
        {
            Console.WriteLine("Explain");
        }
    }
 
    public class Student : Person
    {
        public Student(string name) : base(name)
        {
            Name = name;
        }
 
        public void Study()
        {
            Console.WriteLine("Study");
        }
    }
}
-------------------------------------Program given by sir-----------------------------------------------------------------------------------
Create a C# program that represents the following UML class diagram. 
The diagram represents public, private, 
and protected attributes as well as class dependency and inheritance.

using System;
public class Shape
{
    protected Location c;
 
    public string ToString()
    {
        return string.Empty;
    }
 
    public double Area()
    {
        return 0.000;
    }
 
    public double Perimeter()
    {
        return 0.000;
    }
}
 
public class Location
{
    private double x, y;
}
 
public class Rectangle : Shape
{
    protected double side1, side2;
}
 
public class Circle : Shape
{
    protected double radius;
}









